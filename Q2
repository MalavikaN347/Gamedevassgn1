# #include<stdio.h>
# #include<stdbool.h>
# // depth is current depth in game tree.
# // nodeindex is index of current node in the tree
# // player is true if current move is the humanâ€™s
# // else false
# // evalss[] stores leaves of Game tree.
# // the tree is given below
# // ni stands for nodeindex
# //                                        ? (ni 0)
# //                       ? (ni 1)                                       ?(ni 2)
# //          ?(ni 3)                ?(ni 4)                    ?(ni 5)                  ?(ni 6)
# // 3(ni 7)     5(ni 8)    2(ni 9)      9(ni 10)      12(ni 11)   5(ni 12)   23(ni 13)      23(ni 14)
# // try to relate the nodeindex of a parent to its child
# // and how the nodeindex of the leaves is related to their index in the array 
def minimax(depth, nodeindex, player, evals):
# //if r is row number of Node, index of that row varies from 2^(r-1)-1 to 2^r - 2
# //node index is in gp. Ex:2+4+8=2((2^r-1)-1)-(2^r-1)+1=2^r-1-2+1
    print(f"{nodeindex}\n")
    row=5-depth
    if (depth==0):
        print(nodeindex)
        return evals[0]

    else:
        if (player):
            maxeval=-1
            i=1
            for i in range(1,3):
                if(nodeindex==0):
                    child=i
                else:
                    child=(((nodeindex-row)*2)+((2**(row-1))-1))+i
                
                print(child)
                eval=minimax(depth-1,child,False,evals)
                maxeval=max(maxeval,eval)
                return maxeval

        else:
            mineval=1000000
            for i in range(1,3):
                child=(((nodeindex-row)*2)+((2**(row-1))-1))+i
                eval=minimax(depth-1,child,True,evals)
                mineval=min(mineval,eval)
                return mineval


    


evals = [3, 5, 2, 9, 12, 5, 23, 23]
res = minimax(4, 0, True, evals)
print(f"The optimal value is :{res}\n")
